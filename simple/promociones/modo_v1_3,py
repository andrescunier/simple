import requests
import json
import csv
import time

def guardar_response_completo(response_text, filename="modo_response_completo.json"):
    """Guarda la respuesta completa del servidor en un archivo."""
    with open(filename, "w", encoding="utf-8") as file:
        file.write(response_text)
    print(f"Respuesta completa guardada en '{filename}'")

def obtener_datos():
    base_url = "https://rewards-handler.playdigital.com.ar/slots"
    params = {
        "slots": "web-modo-hub-promos_corriendo,web-modo-hub-proximas_promos,web-modo-hub-promos_finalizadas",
        "limit": 25,
        "page": 1,
        "source": "web_modo",
        "origin": "web_modo",
        "fcalcstatus": "running,next_for_product,finished_for_product",
        "search_ia": "false"
    }
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
        "Accept": "application/json, text/plain, */*",
        "Referer": "https://www.modo.com.ar/promos",
        "Origin": "https://www.modo.com.ar",
        "Cache-Control": "no-cache",
        "x-auth-application": "TU_TOKEN_AQUI"  # Reemplazar con tu token
    }

    try:
        session = requests.Session()

        # --- 1. OBTENER TOTAL DE PÁGINAS ---
        response = session.get(base_url, headers=headers, params=params)
        print("Código de respuesta HTTP (Primer Request):", response.status_code)

        if response.status_code != 200:
            print("Respuesta del servidor:", response.text)
            response.raise_for_status()

        guardar_response_completo(response.text, "modo_response_completo_pagina_1.json")

        try:
            data = response.json()
            print("Respuesta JSON recibida correctamente.")
        except json.JSONDecodeError:
            print("Error al decodificar la respuesta JSON.")
            return

        if "metadata" not in data or "pagination" not in data["metadata"]:
            print("La estructura JSON no contiene 'metadata' -> 'pagination'.")
            return
        
        total_pages = data["metadata"]["pagination"]["total_pages"]
        print(f"Total de páginas a procesar: {total_pages}")

        # --- 2. RECOPILAR DATOS DE TODAS LAS PÁGINAS ---
        all_cards = []

        for page in range(1, total_pages + 1):
            params["page"] = page
            response = session.get(base_url, headers=headers, params=params)
            print(f"Código de respuesta HTTP (Página {page}):", response.status_code)

            if response.status_code != 200:
                print(f"Error en página {page}: {response.text}")
                continue

            try:
                page_data = response.json()
            except json.JSONDecodeError:
                print(f"Error al decodificar JSON en página {page}")
                continue

            cards = page_data.get("data", {}).get("cards", [])
            all_cards.extend(cards)

            print(f"Página {page} - Resultados obtenidos: {len(cards)}")

            # Pequeña pausa para evitar bloqueos del servidor
            time.sleep(1)

        if not all_cards:
            print("No se encontraron tarjetas ('cards') en ninguna página.")
            return

        # --- 3. GUARDAR DATOS EN CSV ---
        with open("modo_datos_completos.csv", "w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)

            # Escribir encabezados basados en las claves del primer objeto
            headers = all_cards[0].keys()
            writer.writerow(headers)

            # Escribir cada objeto como una línea en el archivo
            for item in all_cards:
                writer.writerow(item.values())

        print(f"Archivo 'modo_datos_completos.csv' generado correctamente con {len(all_cards)} registros.")

    except requests.exceptions.RequestException as e:
        print(f"Error al obtener los datos: {e}")

if __name__ == "__main__":
    obtener_datos()
